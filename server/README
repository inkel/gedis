PACKAGE DOCUMENTATION

package server
    import "github.com/inkel/gedis/server"

    gedis server - Generic Redis server implementation

    This package allows to create servers that can talk to clients by using
    the Redis protocol

    Redis protocol: http://redis.io/topics/protocol

    As an example, the following implements a very simple Redis server that
    only respond to the PING command:

	package main
	import (
		"fmt"
		gedis "github.com/inkel/gedis/server"
		"os"
		"os/signal"
	)
	func main() {
		c := make(chan os.Signal, 1)
		signal.Notify(c, os.Interrupt, os.Kill)
		s, err := gedis.NewServer("tcp", ":10003")
		if err != nil {
			panic(err)
		}
		defer s.Close()
		pong := []byte("+PONG\r\n")
		earg := []byte("-ERR wrong number of arguments for 'ping' command\r\n")
		s.Handle("PING", func(c *gedis.Client, args []string) error {
			if len(args) != 0 {
				c.Write(earg)
				return nil
			} else {
				c.Write(pong)
			}
			return nil
		})
		go s.Loop()
		sig := <-c
		fmt.Println("Bye!", sig)
	}


FUNCTIONS

func Read(r Reader) (res [][]byte, err error)
    Read a multi-bulk request from a Redis client

    Redis client can only send multi-bulk requests to a Redis server. In
    truth they can also send an inline request, however that is currently
    not covered by this implementation


TYPES

type Client struct {
    // contains filtered or unexported fields
}
    Holds pointers to the current Server and client net.Conn


func (c *Client) Close()
    Disconnects a client

func (c *Client) Error(err error) (int, error)
    Sends an error to the client, formatted accordingly to the Redis
    protocol

func (c *Client) Errorf(format string, args ...interface{}) (int, error)
    Sends a string formatted as an error to the client

func (c *Client) Read() (interface{}, error)
    Read from the client, parsing the input with the Redis protocol

func (c *Client) Status(status string) (int, error)
    Sends a status response, formatted accordingly to the Redis protocol

func (c *Client) Write(bytes []byte) (int, error)
    Send a sequence of bytes to a client


type Handler func(c *Client, args []string) error
    Signature that command handler functions must have



type ParseError struct {
    // contains filtered or unexported fields
}
    Struct to hold parsing errors


func (pe *ParseError) Error() string


type Reader interface {
    Read([]byte) (int, error)
}
    Interface for reading from Redis clients



type Server struct {
    // contains filtered or unexported fields
}
    Structure to hold the necessary information to run a generic Redis
    server


func NewServer(network, address string) (s Server, err error)
    Returns a new Server that listen in the specified network address


func (s *Server) Close() error
    Closes a Redis server and stop processing

func (s *Server) Handle(cmd string, handler Handler)
    Add a command handler

    Note that this function does not validate that the command is a valid
    Redis command, nor that the command hasn't already a handler.

func (s *Server) Loop()
    Main event loop for Redis clients
