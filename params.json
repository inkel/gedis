{"name":"Gedis","tagline":"gedis - a Redis client written in Go","body":"# gedis - a low-level interface for Redis written in Go\r\n\r\n`gedis` implements a very low-level interface to read and write using the Redis protocol. It also provides a simple client to talk to a Redis server.\r\n\r\n**This is far from being production ready.**\r\n\r\n## API\r\n\r\nGedis currently provides two API functions for writing and reading the [Redis protocol](http://redis.io/topics/protocol). It also defines two simple interfaces: `Reader` and `Writer`\r\n\r\n### Writing\r\n\r\nGedis defines the following `Writer` interface:\r\n\r\n```go\r\ntype Writer interface {\r\n\tWrite(p []byte) (n int, err error)\r\n}\r\n```\r\n\r\nIt is possible to send Redis commands to any object that implements that interface, i.e. [`net.Conn`](http://golang.org/pkg/net/#Conn), by using the following function:\r\n\r\n```go\r\nWrite(w Writer, args ...string) (n int, err error)\r\n```\r\n\r\n### Reading\r\n\r\nGedis defines the following `Reader` interface:\r\n\r\n```go\r\ntype Reader interface {\r\n\tRead(b []byte) (n int, err error)\r\n}\r\n```\r\n\r\nIt is possible to read Redis replies from any object that implements that interface, i.e. [`net.Conn`](http://golang.org/pkg/net/#Conn), by using the following function:\r\n\r\n```go\r\nRead(r Reader) (reply interface{}, err error)\r\n```\r\n\r\n### Example\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/inkel/gedis\"\r\n\t\"net\"\r\n)\r\n\r\nfunc main() {\r\n\tc, err := net.Dial(\"tcp\", \"localhost:6379\")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer c.Close()\r\n\r\n\tf := func(cmd string, args ...string) {\r\n\t\tfmt.Printf(\"> %s\", cmd)\r\n\t\tfor _, arg := range args {\r\n\t\t\tfmt.Printf(\" %q\", arg)\r\n\t\t}\r\n\t\tfmt.Println()\r\n\r\n\t\t// Send to command to Redis server\r\n\t\t_, err := gedis.Write(c, cmd, args...)\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\r\n\t\t// Read the reply from the server\r\n\t\tres, err := gedis.Read(c)\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\t\tfmt.Printf(\"< %#v\\n\\n\", res)\r\n\t}\r\n\r\n\tf(\"PING\")\r\n\r\n\tf(\"SET\", \"lorem\", \"ipsum\")\r\n\r\n\tf(\"INCR\", \"counter\")\r\n\r\n\tf(\"HMSET\", \"hash\", \"field1\", \"lorem\", \"field2\", \"ipsum\")\r\n\r\n\tf(\"HGETALL\", \"hash\")\r\n\r\n\tf(\"MULTI\")\r\n\tf(\"GET\", \"counter\")\r\n\tf(\"GET\", \"nonexisting\")\r\n\tf(\"EXEC\")\r\n}\r\n\r\n```\r\n\r\n## Client\r\n\r\nTo avoid you the hassle of having to pass the connction parameter in every call, `gedis` defines the following `Client` object:\r\n\r\n```go\r\ntype Client struct {}\r\n\r\nfunc Dial(network, address string) (c Client, err error)\r\n\r\nfunc (c *Client) Close() error\r\n\r\nfunc (c *Client) Send(cmd string, args ...string) (interface{}, error)\r\n```\r\n\r\n### Example\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/inkel/gedis\"\r\n)\r\n\r\nfunc main() {\r\n\tc, err := gedis.Dial(\"tcp\", \"localhost:6379\")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer c.Close()\r\n\r\n\tf := func(cmd string, args ...string) {\r\n\t\tfmt.Printf(\"> %s\", cmd)\r\n\t\tfor _, arg := range args {\r\n\t\t\tfmt.Printf(\" %q\", arg)\r\n\t\t}\r\n\t\tfmt.Println()\r\n\r\n\t\t// Send to command to Redis server\r\n\t\tres, err := c.Send(cmd, args...)\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\r\n\t\tfmt.Printf(\"< %#v\\n\\n\", res)\r\n\t}\r\n\r\n\tf(\"PING\")\r\n\r\n\tf(\"SET\", \"lorem\", \"ipsum\")\r\n\r\n\tf(\"INCR\", \"counter\")\r\n\r\n\tf(\"HMSET\", \"hash\", \"field1\", \"lorem\", \"field2\", \"ipsum\")\r\n\r\n\tf(\"HGETALL\", \"hash\")\r\n\r\n\tf(\"MULTI\")\r\n\tf(\"GET\", \"counter\")\r\n\tf(\"GET\", \"nonexisting\")\r\n\tf(\"EXEC\")\r\n}\r\n```\r\n\r\n## Build & test\r\n\r\nIn your `$GOPATH` do the following:\r\n\r\n```\r\ngo get github.com/inkel/gedis\r\n```\r\n\r\nThen you can build it by executing:\r\n\r\n```\r\ngo build github.com/inkel/gedis\r\n```\r\n\r\nTesting and benchmark:\r\n\r\n```\r\ngo test github.com/inkel/gedis\r\ngo test github.com/inkel/gedis -bench=\".*\"\r\n```\r\n\r\nNote that running the benchmarks **will** run the tests beforehand.\r\n\r\n\r\n## References\r\n\r\n* [Redis protocol](http://redis.io/topics/protocol)\r\n* [How to write Go code](http://golang.org/doc/code.html)\r\n\r\n## TODO\r\n\r\n* Documentation\r\n* Tests\r\n  * ~~`\\r\\n` in a reply~~\r\n  * ~~Null elements in Multi-Bulk replies~~\r\n  * ~~Multi-Bulk inside Multi-Bulk replies~~\r\n* Network\r\n* Socket\r\n* Pipeline\r\n* ~~Improve Bulk/Multi-Bulk `nil`~~\r\n\r\n## Real-world example\r\n\r\nHere we will implement a simple MONITOR that mimicks the command `redis-cli MONITOR`:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/inkel/gedis\"\r\n)\r\n\r\nfunc main() {\r\n\tc, err := gedis.Dial(\"tcp\", \":6379\")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tres, err := c.Send(\"MONITOR\")\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\r\n\tfor {\r\n\t\tfmt.Println(res)\r\n\t\tres, err = c.Read()\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nAs you can see, using `gedis` is very simple!\r\n\r\n## Why\r\n\r\nI wanted to learn Go, so I decided to write a minimal Redis client.\r\n\r\nPerhaps one day I might decide to do something else with it, but in the mean, the goals are merely academic.\r\n\r\nFeel free to comment on the code and send patches if you like.\r\n","google":"UA-22300706-3","note":"Don't delete this file! It's used internally to help with page regeneration."}