{"name":"Gedis","tagline":"gedis - a Redis client written in Go","body":"# gedis - a low-level interface in Go for Redis\r\n\r\n`gedis` implements a very low-level interface to read and write using the [Redis](http://redis.io/) [protocol](http://redis.io/topics/protocol).\r\n\r\nIt also provides a simple client to talk to a Redis server and a generic Redis server, which allows you to implement your own server that understands the Redis protocol.\r\n\r\n[![Build Status](https://travis-ci.org/inkel/gedis.png?branch=master)](https://travis-ci.org/inkel/gedis) `master` branch status at [Travis CI](https://travis-ci.org/)\r\n\r\n## API documentation\r\n\r\ngedis API documentation is available at the fabulous [GoDoc](http://godoc.org/) website, in the following locations:\r\n\r\n* Parser: http://godoc.org/github.com/inkel/gedis\r\n* Server: http://godoc.org/github.com/inkel/gedis/server\r\n* Client: http://godoc.org/github.com/inkel/gedis/client\r\n\r\n## Examples\r\n\r\nYou can find all the examples at https://github.com/inkel/gedis-examples\r\n\r\n### Parser\r\n\r\nIn this example we'll create [`net.Conn`](http://golang.org/pkg/net/#Conn) to a Redis server and we'll send commands by using the parser function [`gedis.Write`](http://godoc.org/github.com/inkel/gedis#Write), and then read the server's response by using [`gedis.Read`](http://godoc.org/github.com/inkel/gedis#Read):\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"flag\"\r\n\t\"fmt\"\r\n\t\"github.com/inkel/gedis\"\r\n\t\"net\"\r\n)\r\n\r\nvar server = flag.String(\"s\", \"localhost:6379\", \"Address of the Redis server\")\r\n\r\nfunc main() {\r\n\tc, err := net.Dial(\"tcp\", *server)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer c.Close()\r\n\r\n\tf := func(args ...interface{}) {\r\n\t\tcmd := args[0]\r\n\r\n\t\tfmt.Printf(\"> %s\", cmd)\r\n\t\tfor _, arg := range args[1:] {\r\n\t\t\tfmt.Printf(\" %q\", arg)\r\n\t\t}\r\n\t\tfmt.Println()\r\n\r\n\t\t// Send to command to Redis server\r\n\t\t_, err := gedis.Write(c, args...)\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\r\n\t\t// Read the reply from the server\r\n\t\tres, err := gedis.Read(c)\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\t\tfmt.Printf(\"< %#v\\n\\n\", res)\r\n\t}\r\n\r\n\tf(\"PING\")\r\n\r\n\tf(\"SET\", \"lorem\", \"ipsum\")\r\n\r\n\tf(\"INCR\", \"counter\")\r\n\r\n\tf(\"HMSET\", \"hash\", \"field1\", \"lorem\", \"field2\", \"ipsum\")\r\n\r\n\tf(\"HGETALL\", \"hash\")\r\n}\r\n```\r\n\r\n#### Output\r\n\r\n```\r\n$ go run ./gedis.go\r\n> PING\r\n< \"PONG\"\r\n\r\n> SET \"lorem\" \"ipsum\"\r\n< \"OK\"\r\n\r\n> INCR \"counter\"\r\n< 6\r\n\r\n> HMSET \"hash\" \"field1\" \"lorem\" \"field2\" \"ipsum\"\r\n< \"OK\"\r\n\r\n> HGETALL \"hash\"\r\n< []interface {}{\"field1\", \"lorem\", \"field2\", \"ipsum\"}\r\n```\r\n\r\n### Client\r\n\r\nYou can also use the [`gedis` client](http://godoc.org/github.com/inkel/gedis/client) package to create a [`Client`](http://godoc.org/github.com/inkel/gedis/client#Client) object that exposes almost the same API as using a `net.Conn`. In the future this client might add more features.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"flag\"\r\n\t\"fmt\"\r\n\t\"github.com/inkel/gedis/client\"\r\n)\r\n\r\nvar server = flag.String(\"s\", \"localhost:6379\", \"Address of the Redis server\")\r\n\r\nfunc main() {\r\n\tc, err := client.Dial(\"tcp\", *server)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t\treturn\r\n\t}\r\n\tdefer c.Close()\r\n\r\n\tf := func(args ...interface{}) {\r\n\t\tfmt.Printf(\"> %v\\n\", args)\r\n\r\n\t\t// Send to command to Redis server\r\n\t\tres, err := c.Send(args...)\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t} else {\r\n\t\t\tfmt.Printf(\"< %#v\\n\\n\", res)\r\n\t\t}\r\n\t}\r\n\r\n\tf(\"PING\")\r\n\r\n\tf(\"SET\", \"lorem\", \"ipsum\")\r\n\r\n\tf(\"INCR\", \"counter\")\r\n\r\n\tf(\"HMSET\", \"hash\", \"field1\", \"lorem\", \"field2\", \"ipsum\")\r\n\r\n\tf(\"HGETALL\", \"hash\")\r\n\r\n\tf(\"MULTI\")\r\n\tf(\"GET\", \"counter\")\r\n\tf(\"GET\", \"nonexisting\")\r\n\tf(\"EXEC\")\r\n}\r\n```\r\n\r\n#### Output\r\n\r\n```\r\n$ go run ./client.go\r\n> [PING]\r\n< \"PONG\"\r\n\r\n> [SET lorem ipsum]\r\n< \"OK\"\r\n\r\n> [INCR counter]\r\n< 7\r\n\r\n> [HMSET hash field1 lorem field2 ipsum]\r\n< \"OK\"\r\n\r\n> [HGETALL hash]\r\n< []interface {}{\"field1\", \"lorem\", \"field2\", \"ipsum\"}\r\n\r\n> [MULTI]\r\n< \"OK\"\r\n\r\n> [GET counter]\r\n< \"QUEUED\"\r\n\r\n> [GET nonexisting]\r\n< \"QUEUED\"\r\n\r\n> [EXEC]\r\n< []interface {}{\"7\", interface {}(nil)}\r\n```\r\n\r\n### Server\r\n\r\nIf you want to build a custom server that understands the Redis protocol, you can use the [`Server`](http://godoc.org/github.com/inkel/gedis/server#Server) type defined in the [`gedis` server](http://godoc.org/github.com/inkel/gedis/server) namespace.\r\n\r\nThe following example implements a server that only responds to the [`PING`](http://redis.io/commands/ping) command:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"flag\"\r\n\t\"fmt\"\r\n\t\"github.com/inkel/gedis/server\"\r\n\t\"os\"\r\n\t\"os/signal\"\r\n)\r\n\r\nvar listen = flag.String(\"l\", \":26379\", \"Address to listen for connections\")\r\n\r\nfunc main() {\r\n\tc := make(chan os.Signal, 1)\r\n\tsignal.Notify(c, os.Interrupt, os.Kill)\r\n\r\n\ts, err := server.NewServer(\"tcp\", *listen)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer s.Close()\r\n\r\n\tpong := []byte(\"+PONG\\r\\n\")\r\n\tearg := []byte(\"-ERR wrong number of arguments for 'ping' command\\r\\n\")\r\n\r\n\ts.Handle(\"PING\", func(c *server.Client, args [][]byte) error {\r\n\t\tif len(args) != 0 {\r\n\t\t\tc.Write(earg)\r\n\t\t\treturn nil\r\n\t\t} else {\r\n\t\t\tc.Write(pong)\r\n\t\t}\r\n\r\n\t\treturn nil\r\n\t})\r\n\r\n\tgo s.Loop()\r\n\r\n\t// Wait for interrupt/kill\r\n\t<-c\r\n\r\n\tfmt.Println(\"Bye!\")\r\n}\r\n```\r\n\r\n#### Usage\r\n\r\n```\r\n$ go run ./server.go &\r\n$ redis-cli -p 26379\r\nredis 127.0.0.1:26379> ping\r\nPONG\r\nredis 127.0.0.1:26379> get inkel\r\n(error) ERR Unrecognized command 'get'\r\nredis 127.0.0.1:26379>\r\n```\r\n\r\nThis generic server performs quite well, though not as fast as the standard C Redis server (which is kind of obvious):\r\n\r\n```\r\n$ redis-benchmark -q -t PING_MBULK -p 26379\r\nPING_BULK: 36630.04 requests per second\r\n```\r\n\r\n## Build & test\r\n\r\nIn your `$GOPATH` do the following:\r\n\r\n```\r\ngo get github.com/inkel/gedis\r\ngo get github.com/inkel/gedis/client\r\ngo get github.com/inkel/gedis/server\r\n```\r\n\r\nThen you can build it by executing:\r\n\r\n```\r\ngo build github.com/inkel/gedis\r\ngo build github.com/inkel/gedis/client\r\ngo build github.com/inkel/gedis/server\r\n```\r\n\r\nTesting and benchmark:\r\n\r\n```\r\ngo test github.com/inkel/gedis\r\ngo test github.com/inkel/gedis -bench=\".*\"\r\n\r\ngo test github.com/inkel/gedis/client\r\ngo test github.com/inkel/gedis/client -bench=\".*\"\r\n\r\ngo test github.com/inkel/gedis/server\r\ngo test github.com/inkel/gedis/server -bench=\".*\"\r\n```\r\n\r\n## References\r\n\r\n* [Redis protocol](http://redis.io/topics/protocol)\r\n* [How to write Go code](http://golang.org/doc/code.html)\r\n\r\n## Why\r\n\r\nI wanted to learn Go, so I decided to write a minimal Redis client.\r\n\r\nPerhaps one day I might decide to do something else with it, but in the mean, the goals are merely academic.\r\n\r\nFeel free to comment on the code and send patches if you like.\r\n\r\n## License\r\n\r\n```\r\nCopyright (c) 2013 Leandro LÃ³pez\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n```\r\n","google":"UA-22300706-3","note":"Don't delete this file! It's used internally to help with page regeneration."}